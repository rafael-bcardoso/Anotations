	Arquivos pricipais em um projeto Android

Se o projeto estiver com a visualização de projeto: View -> Tool Windows -> Project e no drop down (à esquerda da página) Estiver selecionada a visualização "Android"

Haverá o seguinte arquivo

	app > java > com.example.myfirstapp > MainActivity

	Este é o MainActivity do projeto, basicamente é o ponto de entrada da aplicação. Quando um app é criado e rodamos ele, o sistema lança uma instancia dessa Activity a então carrega este layout;

	app > res > layout > activity_main.xml

	Este XML define o layout para a activity (User Interface). Ele que contém um elemento chamado TextView com o texto "Hello World!"

	Gradle Scripts > build.gradle

	Podemos observar que há dois este nome. 

	Um está se referindo ao projeto build.gradle(Project: Meu projeto aqui);

	E um está se referindo ao app module - build.gradle (Module: app)

	Cada módulo do projeto possui seu próprio build.gradle. Como este projeto que criamos possui apenas um módulo, vemos apenas o (Module: app)


	app > res > values > strings.xml

	Esse arquivo é um arquivo onde podemos especificar todas as strings que serão utilizadas na nossa página. Permitindo que a nós possamos centralizar todas as strings em um mesmo lugar;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Os componentes que estamos arrastando para o projeto chamam-se Android Studio Layout Editor

As interfaces de usuário do Android são em forma de Arvore. 

Layouts == ViewGroup objects, containers que controlam como seus filhos irão estar posicionados na tela;
Widgets == View objects, UI Components como botões, text boxes e etc;

O android prove um XML para seus ViewGroups e Views objects, portanto, muitas UI são definidas em XML files. Contudo, em vez de ensinar a escrever cada um dos XML, você pode usar o Android Studio Layout Editor, que basicamente
é um arrasta e solta de componentes;

ConstraintLayouts é um layout que define a posição para cada component baseado em restrições (constraints) para componentes irmãos a parent layouts. Com esse tipo de layout não precisamos mais de layouts aninhados. Um layout aninhado, 
é um layout dentro de outro layout

Um chain é uma restrição bidirecional entre dois os mais componentes que permite você exibir as visualizações encadeada em unissono;

Match constraints: Significa que o componente irá se expandir até o final da largura que ele pode ir == width: 100%;


-------------------------------------------------------------

Chain são regras de alinhamento entre os componentes. Basicamente, é possível você distribuir os componentes de forma uniforme na tela sem a necessidade de usar guide-lines, ou seja, o próprio Android te da essa possibilidade;

Constrain: Cria regras de constrain com base no primeiro parent que o component possui;

Expand Horizontaly: Expandi o componente na largura total da tela que estamos trabalhando; Respeitando os componentes que estão ao redor;

Center: Centraliza o component de acordo com a nossa necessidade;


-------------------------------------------------------------------------------------------------

FrameLayout: 
		Permite que você coloque imagens ou components um sobre o outro;

		Para centralizar um botão podemos utilizar o gravity, tanto para constraint layout como para frame layout;

CordinatorLayout 
	
		Possui a mesma função do frameLayout, mas é uma evolução do frameLayout. Com o cordinatorLayout nós temos mais possibilidades configurações;	
		
		Para utilizar o cordinatorLayout é necessário definir alguns recursos (dependencias)

GridLayout

		Para utilizar o gridLayout é necessário defini-lo via código, pois via interface de usuário não é possivel definir o GridLayout; 

		Qual a diferença entre o gridLayout e o GridView ???

			O gridLayout te dá a possibilidade de criar um layout somente utilizando a interface do Android Studio. O GridView exige que tudo seja feito via código;

		Uma galeira de fotos é um bom exemplo de utilização de GridLayout;



-----------------------------------------------------------------------------------------------------------------------------------

Componentes de tela;

Caixas de textos:

	Por default os campos de texto vem com um valor já setado. Para tira-lo é só ir no campo [text] e apagar o valor. 
	Para definir um valor para o placeholder é mais fácil. Apenas indo no campo [hint] e apagando já resolvemos esse problema.
	Para definir que queremos apenas teclados do tipo number é bem simples. Em cima do campo [hint] há um campo chamado [inputType] que basicamente diz qual será o valor a ser inputado nesse campo;

	O componente que não esconde o placeholder é o {textInputLayout}, ele coloca o placeholder em cima do campo;


--------------------------------------------------------------------------------------------------------------------------------------


Para acessar os campos de uma tela por um component, é necessário que ele receba como paramentro a class  View view, para que assim possamos chamá-lo da tela 

Ex.1 

public void Enviar(View view) {
	String txtName = findViewById(R.id.txtName);

	String name = txtName.getText().toString();
}

A classe MainActivity pega o XML que criamos e monta a visualização para o dispositivo que queremos;


-------------------------------------------------------------

	Estudos sobre layouts no Android 

	1) Orientação de Telas
		
		app -> manifests -> AndroidManifest.xml (Arquivo onde podemos colocar configurações globais do nosso aplicativo)

		 há nesse arquivo xml uma tag chamada 
		
		<activity android:name=".MainActivity"> 
		</activity> 
		Essa tag é a responsável por dizer para o aplicativo quem é a classe principal do nosso app, ou seja, a classe responsável pela inicialização de todo o aplicativo;
		Activity, basicamente, é um tela do nosso app;


		Dentro da tag activity é possível colocarmos a orientação da tela através de uma propriedade chamada 
		android:screenOrientation="tipo_orientacao"

			Ex: portrait 	= vertical
			    sensor 	= muda conforme viramos o aparelho
			    landscape 	= horinzontal

	2-) Customização de Temas no Android

		app -> res -> values -> styles.xml ==> Nesse arquivo conseguimos alterar todas as configurações de cores e criar novas variaveis para uso no nosso projeto;
			
			Dentro de styles nós definimos o nosso theme cujo nome é AppTheme
				Podemos ter N themes no nosso projeto e podemos seleciona-los na nossa application lá em AndroidManifest.xml
				em: 

				<application
					android:theme="@style/AppTheme"
				>
				</application>
			

		app -> res -> values -> colors.xml ==> Conseguimos centralizar todas as cores do nosso app

			* O colorAccent é uma cor que colocamos em alguns componentes apenas, como por exemplo o Switch, quando ele é selecionado ele utliza a cor do colorAccent

-----------------------------------------------------------------------------------------------------------------------------------------------------------

	Constraint Layout	
		
		Começou na versão 2.2 do Android Studio

		Constraint Layout usa regras matemáticas para posicionar os componentes na tela independente do dispositivo (TV, Celular etc)

		Antes do Constraint Layout, o Android Studio fazia os posicionamentos de forma fixa levando em consideração a altura e a distância do componente a parede da equerda;

		Infer Constraint: Cria as regras de layout sozinho pra você KK

		Quando um elemento está com wrap content habilitado, isso quer dizer que todo o conteúdo dele será considerado. Ele irá 
		crescer conforme o seu conteúdo interno;

		Há também o fixed, que como o proprio nome diz é deixa o tamanho do elemento fixo

		Há também o match contraint que basicamente é um width: 100% na tela kk ignorando todas as constraints; Muito utilizado em imagens, quando queremos que ela ocupe toda a largura da tela;

			O que é a Unidade de medida dp ???
			
		Tamanho da tela = Tamanho fisico da tela 
		Densidade da tela = quantidade de pixels em uma área fixa da tela dpi => dots per inch

		dp é uma medida virtual, pois os dispositivos android possuem uma variedade muito grande de densidade;


		Podemos ter 2 aparelhos de mesmo tamanho com densidades de imagens totalmente diferentes, ou seja, um com mais e outro com menos;

		dp tem idependencia de densidade é conseguida porque o dp é uma unidade virtual


		Em uma densidade baixa 1px == 1dp

		Em uma densidade média 1dp == 1.5px;

		Em uma densidade alta  1dp == 2px;

		é virtual pois em tela com mais pixels, o tamanho dos componentes seriam diferentes pois em uma mesma area teriamos mais pixels 


		Ex: 1cm^2 em uma tela com baixa densidade tem 10pixels			

		    1cm^2 em um tela com alta densidade possui 100pixels, por exemplo. Logo o componente que precisa só de de 10pixel vai ficar muito menor;

---------------------------------------------------------------------------------------------------------------------------------------------------------------


	Como inserir imagens no Android ??

		CTRL + C e CTRL + V em App -> res -> drawable


-------------------------------------------------------------------------------------------------------------------------------------------------


	Como alterar o caminho onde os disposivos são salvos dentro da máquina 

	Ir nas variaveis de ambiente e colocar essa variável

	ANDROID_SDK_HOME e colocar o seguinte caminho: D:\Users\Rafael\AppData\Local\Android\Devices

	Neste caso estamos querendo que todos os devices que vamos utilizar esteja no outro disco

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Estrutura de um projeto Android 

	app
	Gradle Scripts
	
	app
		manifests	
			AndroidManifest.xml

			O que é o AndroidManifest.xml??
			É um arquivo de configuração do Android para que possamos colocar as principais configurações do app Android. Como por exemplo, o ícone do projeto

			Quando criamos um projeto em branco, temos a criação de um label e podemos também configurar diferentes themes para a aplicação.

			E sem sobra de dúvidas o que temos de principal no AndroidManifest.xml é qual é a aplicação principal que temos na aplicação.

			Onde temos as permissões do projeto é no AndroidManifest.xml


		java

			com.example.helloworld
				
				Nada mais é que o diretório onde temos a classe principal do projeto. Quando um projeto em branco é criado essa é a classe que é criada com ele.

		java (generated) 
			
			com.example.helloworld
				
				Diretório onde temos alguns informações sobre o build da aplicação em ambiente de desenvolvimento.

		res
			drawable
				Colocamos nesse diretório: Imagens, Músicas e qualquer arquivo necessário para o projeto.
			layout
				Colocamos os arquivos de interface

					login.xml
			mipmap
				Parece com o drawable, mas só colocamos ícones nesse diretório.
			values
				Colocamos configurações globais para o app em arquivos xml

					colors.xml
					strings.xml
					styles.xml

		Wrap content: Está relacionado ao elemento que estamos trabalhando, ou seja, o elemento terá o tamanho de seu conteúdo
		Fixed: Como o próprio nome diz, deixa o elemento com tamanho fixo e com isso se seu conteúdo for dinâmico o elemento terá problemas. O fixed joga o texto para baixo se não couber dentro do tamanho esperado;
		Match contraint: Ocupa todo espaço que estava separado para as constraints

		Seguindo ainda na parte de layouts do Android é possível adicionar imagens utilizando o ImageView. Quando adicionamos imagens ainda conseguimos definir no 
		elemento ImageView como será suas contraints: Match Constraint, Fixed ou Wrap Content. Match constraint a imagem fica do tamanho geral das constraints, 
		Wrap Content -> a imagem fica do tamanho original dela mesmo, fixed a gente define o tamanho da imagem.

			Depois definir o tamanho da imagem, podemos adicionar outra propriedade muito importante para as imagens, O Scale Type. Essa propriedade nos ajuda 
			a definir como será a escala utilizada para a imagem que estamos trabalhando.

------------------------------------------------------------------------------------------------------------------------------------------------

	Guideline: O que são guideline? são as linhas que utilizamos para nos horientarmos de onde devemos colocar o componente. 
			Quando a gente vai colocar um textbox, a própria IDE do Android Studio já nos apresenta algumas linhas que podemos 
			utilizar como referência para posicionar nosso componente. E com isso podemos fazer o componente ficar cada vez em melhor 
			posição.
		
-----------------------------------------------------------------------------------------------------------------------------------------------------

	Layout Relativo e Layout Linear foram muito utilizados antes do Constraint Layout
	
	Layout Relativo: Permite alinhar os elementos um baseado no outro. O Relative Layout sempre utiliza espaçamentos fixos. 
			 Isso impossibilita seu uso para telas maiores e a responsividade.


	Linear Layout:  Como o próprio nome diz ele alinha os elementos de forma linear, tanto vertical como horizontal;


	Frame Layout:  Antes do Constraint Layout, para colocar um item sobre o outro era utilizado o FrameLayout

	Cordinator Layout é uma evolução do Frame Layout

-----------------------------------------------------------------------------------------------------------------------------------------------

	Para zerar o padding da TextInputEditText será necessário usar esses atributos na Tag TextInputEditText

	<com.google.android.material.textfield.TextInputEditText
		android:paddingStart="0dp"
	        android:paddingEnd="0dp"/>

-------------------------------------------------------------------------------------------------------------------------------------------


	Como que o Android instacia uma interface?

		Ele não instancia uma interface o que ele faz é por baixo do panos criar uma classe anonima que implementa essa interface e com isso podemos utilizar essa classe anônima.

--------------------------------------------------------------------------------------------------------------------------------------------------

	Todos os recursos globais da aplicação podem ser acessados através da classe Context;

	Uma propriedade definida como final não pode ter seu valor alterado;

	Conseguimos acessar o Context da aplicaçao pelo this e pelo método getApplicationContext();

	Custom Toast Is deprecated in API 30.
  
---------------------------------------------------------------------------------------------------------------------------------------

	Visibility: visible - Aparece na tela.
		    invisible - Não aparece na tela, mas o componente ainda está lá. 
		    gone - O componente sumiu totalmente da tela.
 
-----------------------------------------------------------------------------------------------------------------------------------------

COMPONENT TYPE ABBREVIATIONS (This list shows two letters which is plenty)
Frame Layout: fl
Linear Layout: ll
Table Layout: tl
Table Row: tr
Grid Layout: gl
Relative Layout: rl

Text View: tv
Button: bt
Check Box: cb
Switch: sw
Toggle Button: tb
Image Button: ib
Image View: iv
Progress Bar: pb
Seek Bar: sb
Rating Bar: rb
Spinner: sp
WebView: wv
Edit Text: et

Radio Group: rg
List View: lv
Grid View: gv
Expandable List View: el
Scroll View: sv
Horizontal Scroll View: hs
Search View:* se
Tab Host: th
Video View: vv
Dialer Filter: df

Include: ic
Fragment: fr
Custom View (other): cv

------------------------------------------------------------------------------------------------------------------------------------------

	Ciclo de vida de uma activity:

		Quando abrimos uma activity ela começa chamando o método 

			onCreate()
			onStart()
			onResume()

		Quando mudamos para outro app ela chama os seguintes métodos

			onPause()
			onStop()

		Quando retornamos para o nosso app ele chama os seguintes métodos:

			onRestart()
			onStart()
			onResume()

		Quando fechamos o nosso App por completo, ele chama o seguinte método

			onPause()
			onStop()
			onDestroy()

		Quando retornamos para o app depois que ele foi destruido tudo começa no método:

			onCreate();


		Para passar um objeto de uma activity para outra, devemos utilizar o método putExtra("chave","valorSimples");

		Agora se quisermos passar um objeto complexo de uma activity para outra, devemos dizer que o método implementa a interface 
		Serializable que convert esse objeto para bytes, podendo ele ser armazenado no próprio aparelho ou enviado para outras activies;

-----------------------------------------------------------------------------------------------------------------------------------------------


	Remover as bordar de um ImageButton: android:background="?attr/selectableItemBackgroundBorderless"

	Colocar uma imagem em um botão normal após a API 30

		<Button
        		android:id="@+id/button6"
        		android:layout_width="wrap_content"
        		android:layout_height="wrap_content"
        		android:background="@drawable/botao_jogar"	-- Important!
        		app:backgroundTint="@android:color/transparent" -- Important!
        		app:backgroundTintMode="add"			-- Very Important
        		app:layout_constraintBottom_toBottomOf="parent"
        		app:layout_constraintEnd_toEndOf="parent"
        		app:layout_constraintStart_toStartOf="parent"
        		app:layout_constraintTop_toBottomOf="@+id/imageView"
        		app:layout_constraintVertical_bias="0.491" />

-------------------------------------------------------------------------------------------------------------------------------------------
		
	Se temos uma cor que vai ser usada no Background de muitas activities, podemos coloca-la nos themes da aplicação no atributo background;

		<item name="android:colorBackground">@color/green_background</item> -- Dessa forma;

---------------------------------------------------------------------------------------------------------------------------------------

	O método finish() dentro de uma activity encerra essa activity;

-----------------------------------------------------------------------------------------------------------------------------------------

	Fragments: O fragment representa um comportamento ou uma porção de interface com usuário na activity
		   Permite a reutilização de códigos, uma vez que eu posso utilizar meu fragement em diversos pontos da minha aplicação
		   Permite a escrita de interfaces mais dinâmicas.

	Para utilizar os Fragments é preciso criar uma estrutura chamada FrameLayout. Essa estrutura é necessária para carregar os 
	fragments dentro dela, funciona como um (wrapper)

----------------------------------------------------------------------------------------------------------------------------------------

	O gravity alinha os elementos dentro do container que ele está. Se você quer que um elemento TextView fique no centro do aparelho 
	ou você alinha o parent ou você fala que o o TextView tem match_parent com o aparelho

----------------------------------------------------------------------------------------------------------------------------------------

	O FRAGMENT DEVE SER INDEPENDENTE DE TELA, OU SEJA, ELE NÃO PODE ESTAR ASSOCIADO A COMPONETES DE UMA DETERMINADA ACTIVITY;

-------------------------------------------------------------------------------------------------------------------------------------------


	O SnackBar não está inseridos nos componentes padrão do Android. Ele é um recurso a parte que pode ser configurado;

--------------------------------------------------------------------------------------------------------------------------------------------

	O conteúdo principal do app é feito num arquivo chamado content_main.xml e o activity_main.xml apenas carrega ele através 
	da TAG <include layout="@layout/content_main" />

	O include funciona semelhante ao partial class do C# o nome do arquivo e o conteúdo é diferente, mas eles podem ser carregado pelo 
	elemento pai.
	
---------------------------------------------------------------------------------------------------------------------------------------------

	O que são os xmlns??
	São as demarcações dos namespaces das propriedades. Eu posso ter a mesma propriedade, com o mesmo nome, em diferentes namaspaces
	

	<person>
		<name>Rafael</name>
		<city>
			<name>São Paulo</name>
		</city>		

	</person>

	Como eu vou saber se a propriedade name que eu estou tratando é de person or city?
	Do jeito que está é impossível saber essa informação.

	<personxml:person xmlns:personxml="http://www.yourperson.com/xml/person
			  xmlns:cityxml="http://www.yourcity.com/xml/city>

		<personxml:name>Rafael</personxml:name>
		<cityxml:homecity>
			<cityxml:name>São Paulo</cityxml>			
		</cityxml>		
	<personxml:person>

	A declaração do namespace sem um identificador como essa: xmlns="http://www.yourexample.com", isso diz que esse é o default namespace do document

	xmlns = xmlnamespace para validar o namspace com tags e propriedades únicas;

	O namespace pode ser declarado pelo atributo xmlns, que geralmente segue o seguinte padrão: xmlns:prefix=”URI”.

	Um namespace é padrão quando não possui um prefix;

	<livros xmlns=”http://livros.com/lista">
    		<livro>
        		<titulo>O jogador número 1</titulo>
        		<autor>Ernest Cline</autor>
    		<livro>
	</livros>

--------------------------------------------------------------------------------------------------------------------------

	Para remover o elevation do Action bar

	getSupportActionBar().setElevation(0);
-----------------------------------------------------------------------------------------------------------------------------

	Há duas formas de para adicionar um fragment a uma activity;
		1 - Dinamicamente usando JAVA
		2 - Staticamente usando XML

	Para que um fragment possa ser usado em uma activity ele deve extender de FragementActivity or AppCompatActivity que já dá suporte 
	ao FragmentActivity

	Para adicionar um Fragment de forma estática é só utilizar a Tag 
	
		
    		<fragment
        		android:name="com.example.android.FooFragment"
        		android:id="@+id/fooFragment"
        		android:layout_width="match_parent" 
        		android:layout_height="match_parent" />

	O segundo caminho para adicionar um Fragment é dinâmicamente através do FragmentManager

	O FragmentManager class adiciona o FragementTransaction class, que nos permite add, remove e alterar os Fragments 
	na Activity em tempo de execução

-----------------------------------------------------------------------------------------------------------------------------------------

	Para que um button possa possuir o evento onClick() é necessário configurar o evento de click antes de retornar o botão

	View view = inflater.inflate(R.id.you_fragment,container,false);
	Button btnPlay = view.findViewById(R.id.your_button_in_fragment);
	btnPlay.setOnClickListener(new View.OnClickListener() {

		@Override
		public void onClick(View view) {

			// Tasks, call other Fragments and etc

		}
	});

	return view; // Dentro do método onCreateView() no Fragment

------------------------------------------------------------------------------------------------------

	Component navigation

	Uma das partes mais importantes do component de navegação é o navigation host. O navigation host
	é um container vazio onde os destination são armazenados. 

	Um navigation host deve derivar do NavHost. O componente NavHost, com a implementação
	NavHostFragment, que gerencia os fragments de destino

	A navegação no app é feita pelo objeto NavController, esse objeto gerencia todas as 
	navegações dentro do NavHost

	Cada NavHost possui seu próprio NavController. Há várias formas de obter uma instância do NavController

	NavHostFragment.findController(Fragment);
	Navigation.findController(Activity, @IdRes int viewId);
	Navigation.findController(View)


	Forma de chamar outro Fragement em um navigation

	btnIntuitive = view.findViewById(R.id.btnIntuitive);
        btnIntuitive.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                BlankFragmentDirections.ActionBlankFragmentToIntuitiveFragment action = BlankFragmentDirections.actionBlankFragmentToIntuitiveFragment();

                action.setMessage("Texto");

                Navigation.findNavController(v).navigate(action);

                // Primeira solução
                /*NavController navController = NavHostFragment.findNavController(BlankFragment.this);
                navController.navigate(R.id.action_blankFragment_to_intuitiveFragment);*/

                // Segunda solução
                //Navigation.findNavController(v).navigate(R.id.action_blankFragment_to_intuitiveFragment);

                // Terceira solução
                //NavHostFragment.findNavController(BlankFragment.this).navigate(R.id.action_blankFragment_to_intuitiveFragment);
            }
        });

        // Quarta solução
        //btnIntuitive.setOnClickListener(Navigation.createNavigateOnClickListener(R.id.action_blankFragment_to_intuitiveFragment));

----------------------------------------------------------------------------------------------------------------------------------------------------


	@+id/nome serve para associar um nome ao componente, ele cria uma entrada na classe R.

	@id/nome apenas identifica/referencia o componente, como por exemplo num RelativeLayout quando se quer indicar a posição de um componente em relação a outro.

	@id/nome só pode ser utilizado após a utilização de @+id/nome.

	Se você quiser pode utilizar apenas e sempre @+id/nome

-----------------------------------------------------------------------------------------------------------------------------------------------

	O type de uma intent é definido em uma lista de mime-types que pode ser encontrado no link abaixo
	
	https://www.sitepoint.com/mime-types-complete-list/

---------------------------------------------------------------------------------------------------------------------------------------------

	Para materials componets, a cor do ícone só é pega se for definida da seguinte forma:
		
		app:tint="@null"

--------------------------------------------------------------------------------------------------------------------------------------------

	Gradle: cada projeto android possui um top-level build.gradle onde as configurações lá colocadas afetam todos so módulos do aplicativo
	

	build.gradle(Module:app): Todos os módulos do aplicativo possui seu próprio build.gradle. Onde as configurações colocadas 
	nesse arquivo afetam somente o módulo a qual o arquivo pertence;


	Top-level build file

	The top-level build.gradle file, Define todas as configurações que são aplicadas para todos os módulos do projeto.

	Por default o build file usa o buildscripts block para definir os Gradle repositórios e dependencias que são comuns a todos os módulos.


	buildscript {

		Repositories: Configura todos os repositórios Gradle para Download das dependências. Gradle já tem suport para
		JCenter, Maven Central e Ivy. Nós podemos também ter repositórios locais ou nossos próprios repositorios globais


		repositories {

			google()
			jcenter()

		}

		O bloco de dependencias configura as dependências Gradle necessárias para criar o projeto. 
		O código abaixo adiciona o Gradle na versão 4.1.0 como uma classpath dependência.
		

		dependencies {
		
			classpath: 'com.android.tools.build:gradle:4.1.0'
		}

		O block allprojects é onde nós podemos configurar os repositórios e dependências que são usadas por todos os módulos no projeto.
		como plugins de terceiros or bibliotecas. Contudo, você deveria configura depedências que são especificas de cada módulo dentro de cada
		módulo no seus respectivos build.gradle. Para os novos projetos o Android Studio já aciona o Google e o JCenter como repositórios defaults,
		mas isso não configura algumas dependências 

		allprojects {
			repositories {
				goolge()
				jcenter()

			}
		}
		

		Para projetos que possuem muitos módulos, pode ser util definir propriedades que são comuns ou compartilhadas por muitos módulos
	
		Esse módulo encapsula propriedades customizadas que são disponiveis para todos os módulos do projeto.
		ext {

			compileSkdVersio = 28

			supportLibVersion = "28.0.0"

		}

		Como eu acesso essas propriedades de dentro de um módulo??

		android {
			compileSdkVersio rootProject.ext.compileSdkVersion

		}

		Portanto, para acessar um propriedade que está no root deve-se usar a seguinte sintaxe:

			rootProject.ext
	

		The module-level build file

		o arquivo build.gradle localizado em cada diretório módulo/projeto, permite-nos definir propriedades que são especificas para cada
		módulo. 

		Essa primeira linha no build configuration aplica o Android plugin para Gradle para esse build
		Essa linha faz com que o android block esteja disponivel para o build po
		apply plugin: 'com.android.application'
		
		Dentro de android nós configuramos todas as propriedades especificas.

		android {
			
			Especificação de que API que o módulo devera ser compilado
			compileSdkVersion 28
			
			Especifica a version de tools que o módulo deverá ter
			buildToolsVersion "29.0.2"
		
			O bloco defaultconfig encapsula todas as variaveis de ambiente do projeto e também pode sobrescrever algumas 
			propriedades do AndroidManifes.xml			

			defaultConfig {
			
				/**
   				  * applicationId uniquely identifies the package for publishing.
				  * However, your source code should still reference the package name
				  * defined by the package attribute in the main/AndroidManifest.xml file.
     				*/

    applicationId 'com.example.myapp'

    // Defines the minimum API level required to run the app.
    minSdkVersion 15

    // Specifies the API level used to test the app.
    targetSdkVersion 28

    // Defines the version number of your app.
    versionCode 1

    // Defines a user-friendly version name for your app.
    versionName "1.0"

-------------------------------------------------------------------------------------------------------------------------------------------
		
    Para colocar um componente dentro de um component 
	CordinatorLayout
	app:layout_behavior="@string/appbar_scrolling_view_behavior" 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Task Plany Upgrade


		"javax.annotation:jsr250-api:${javaxAnnotationVersion}", Essa biblioteca era necessário em versões do Dagger anteriores a versão 2.1
		por causa do @Generated annotation usado no Dagger. Essa annotation não é incluída na Android API jar, então é necessário usar essa biblioteca.















